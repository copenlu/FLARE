   Exit: (10) protocol("samples/final_predictions/prolog_codes_gsm8k/prolog_code-3_gsm8k-trace_output.txt")
^  Call: (10) forall(call(query(_5830)), write(path_result:query(_5830)))
   Call: (12) query(_5830)
   Call: (13) calculate_josh_profit(_5830)
   Call: (14) calculate_profit(80000, 50000, _5830)
   Call: (15) final_house_value(80000, 50000, _15124)
   Call: (16) increase_in_value(50000, _15742)
   Call: (17) _15742 is 1.5*50000
   Exit: (17) 75000.0 is 1.5*50000
   Exit: (16) increase_in_value(50000, 75000.0)
   Call: (16) _15124 is 80000+50000+75000.0
   Exit: (16) 205000.0 is 80000+50000+75000.0
   Exit: (15) final_house_value(80000, 50000, 205000.0)
   Call: (15) _5830 is 205000.0-(80000+50000)
   Exit: (15) 75000.0 is 205000.0-(80000+50000)
   Exit: (14) calculate_profit(80000, 50000, 75000.0)
   Exit: (13) calculate_josh_profit(75000.0)
   Exit: (12) query(75000.0)
path_result:query(75000.0)
^  Exit: (10) forall(user:call(query(_5830)), user:write(path_result:query(_5830)))
   Exit: (6) run_init_goal((set_prolog_flag(color_term, false), leash(-all), trace, protocol("samples/final_predictions/prolog_codes_gsm8k/prolog_code-3_gsm8k-trace_output.txt"), forall(call(query(_5830)), write(path_result:query(_5830)))), 'set_prolog_flag(color_term,false), leash(-all), trace, protocol("samples/final_predictions/prolog_codes_gsm8k/prolog_code-3_gsm8k-trace_output.txt"), forall(call(query(Profit)), (write(path_result: query(Profit)))).')
